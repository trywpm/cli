name: ci

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      platforms: ${{ steps.platforms.outputs.platforms }}
    steps:
      - name: platforms matrix
        id: platforms
        run: |
          platforms="[
            {\"os\": \"darwin\", \"arch\": \"amd64\"},
            {\"os\": \"darwin\", \"arch\": \"arm64\"},
            {\"os\": \"linux\", \"arch\": \"amd64\"},
            {\"os\": \"linux\", \"arch\": \"arm64\"},
            {\"os\": \"linux\", \"arch\": \"arm\", \"arm\": \"6\"},
            {\"os\": \"linux\", \"arch\": \"arm\", \"arm\": \"7\"},
            {\"os\": \"windows\", \"arch\": \"amd64\"},
            {\"os\": \"windows\", \"arch\": \"arm64\"}
          ]"
          echo "platforms=$(echo $platforms | jq -c .)" >> $GITHUB_OUTPUT

  lint:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      pull-requests: read
    steps:
      - name: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: setup go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: "^1.23"

      - name: check dependencies
        run: |
          go mod tidy
          git diff --exit-code go.mod

      - name: lint
        uses: golangci/golangci-lint-action@ec5d18412c0aeab7936cb16880d708ba2a64e1ae # v6.2.0

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{fromJson(needs.prepare.outputs.platforms)}}
    permissions:
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: build
        uses: ./.github/actions/build-wpm
        with:
          go-os: ${{ matrix.platform.os }}
          go-arm: ${{ matrix.platform.arm }}
          go-arch: ${{ matrix.platform.arch }}

      - name: list artifacts
        run: ls -alh ./build

      - name: upload artifacts
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          # see $TARGET in .github/actions/build-wpm/scripts/.variables
          name: wpm-${{ matrix.platform.os }}-${{ matrix.platform.arch }}${{ matrix.platform.arm && '-v'}}${{ matrix.platform.arm }}
          path: ./build/*
          if-no-files-found: error

      - name: s3 upload
        if: ${{ github.ref_type == 'branch' }}
        uses: ./.github/actions/s3-upload
        with:
          source: ./build
          vault: ${{ secrets.OP_VAULT }}
          bucket: ${{ secrets.S3_BUCKET }}
          rclone-config: ${{ secrets.RCLONE_CONFIG }}
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          target: ${{ github.event.number && github.event.number != null && github.event.number || 'latest' }}

  pr-comment:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: ${{ github.head_ref && github.head_ref != null }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: prepare
        id: find-existing-comment
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        with:
          script: |
            return (await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })).data.find((comment) => comment.body.includes('wpm cli builds'))?.id || null

      - name: comment body
        id: comment-body
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        with:
          script: |
            const platforms = JSON.parse(${{ toJson(needs.prepare.outputs.platforms) }})
            const builds = platforms.map(({ os, arm, arch }) => {
              const buildPath = `wpm-${os}-${arch}${arm ? `-v${arm}` : ''}`
              const buildUrl = `https://cli-builds.wpm.so/${{ github.event.number }}/${buildPath}${os === 'windows' ? '.exe' : ''}`
              const spec = `${os}/${arch}${arm ? `/v${arm}` : ''}`
              return `- \`${spec}\` - [\`build\`](${buildUrl}) [\`checksum\`](${buildUrl}.sha256)`
            }).join('\n')
            return `:package: wpm cli builds :package:\n${builds}\n`

      - name: create comment
        if: ${{ steps.find-existing-comment.outputs.result == 'null' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        with:
          script: |
            github.rest.issues.createComment({
              repo: context.repo.repo,
              owner: context.repo.owner,
              issue_number: context.issue.number,
              body: ${{ steps.comment-body.outputs.result }},
            });

      - name: update comment
        if: ${{ steps.find-existing-comment.outputs.result != 'null' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        with:
          script: |
            github.rest.issues.updateComment({
              repo: context.repo.repo,
              owner: context.repo.owner,
              body: ${{ steps.comment-body.outputs.result }},
              comment_id: ${{ steps.find-existing-comment.outputs.result }},
            });

  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    permissions:
      contents: write
    steps:
      - name: download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
        with:
          path: ./build
          pattern: wpm-*
          merge-multiple: true

      - name: create release
        id: create-release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        with:
          script: |
            const tagName = context.ref.replace('refs/tags/', '')
            const isPreRelease = tagName.includes('-rc');
            const { data: { upload_url: uploadUrl } } = await github.rest.repos.createRelease({
              draft: true,
              name: tagName,
              tag_name: tagName,
              body: 'wpm cli builds',
              repo: context.repo.repo,
              prerelease: isPreRelease,
              owner: context.repo.owner,
              target_commitish: context.sha,
            });
            return uploadUrl

      - name: upload release assets
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        with:
          script: |
            const fs = require('fs');
            const uploadUrl = ${{ steps.create-release.outputs.result }}
            const files = fs.readdirSync('./build').map((file) => `./build/${file}`)
            for (const file of files) {
              const name = file.replace('./build/', '')
              const response = await github.rest.repos.uploadReleaseAsset({
                url: uploadUrl,
                headers: {
                  'content-length': fs.statSync(file).size
                  'content-type': name.endsWith('.sha256') ? 'text/plain' : 'application/octet-stream',
                },
                name,
                file: fs.readFileSync(file),
              });
            }
